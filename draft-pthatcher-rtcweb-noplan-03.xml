<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc category="std" ipr="trust200902"
     docName="draft-pthatcher-rtcweb-noplan-trimmed-00">

<?rfc toc='yes' ?>
<?rfc symrefs='yes' ?>
<?rfc sortrefs='yes'?>
<?rfc iprnotified='no' ?>
<?rfc strict='yes' ?>
<?rfc compact='yes' ?>
  <front>
    <title abbrev="No Plan: Many media sources without many SDP exchanges">No Plan:
      Use WebRTC JS API extensions to add and remove media sources without using extra SDP exchanges.
    </title>

    <author initials='E.' surname='Ivov' fullname='Emil Ivov'>
      <organization abbrev='Jitsi'>Jitsi</organization>
      <address>
        <postal>
          <street></street>
          <city>Strasbourg</city>
          <code>67000</code>
          <country>France</country>
        </postal>
        <phone>+33-177-624-330</phone>
        <email>emcho@jitsi.org</email>
      </address>
    </author>
    <author initials='E.' surname='Marocco' fullname='Enrico Marocco'>
      <organization>Telecom Italia</organization>
      <address>
        <postal>
          <street>Via G. Reiss Romoli, 274</street>
          <city>Turin</city>
          <code>10148</code>
          <country>Italy</country>
        </postal>
        <email>enrico.marocco@telecomitalia.it</email>
      </address>
    </author>
    <author fullname="Peter Thatcher" initials="P." surname="Thatcher">
      <organization>Google</organization>
      <address>
        <postal>
          <street>747 6th St S</street>
          <city>Kirkland</city>
          <region>WA</region>
          <code>98033</code>
          <country>USA</country>
        </postal>
        <phone>+1 857 288 8888</phone>
        <email>pthatcher@google.com</email>
      </address>
    </author>
    <date/>

    <abstract>
      <t>
        This document describes changes to the WebRTC JS API that
        would make is possible for WebRTC applications to send and
        receive multiple media sources within a multimedia session
        without needing to define the per-source RTP parameteters
        (such as SSRCS) within SDP.  This would give WebRTC
        applications a clean, flexible API that could implement "Plan
        A" SDP, "Plan B" SDP, or any other signalling mechanism that
        WebRTC application wishes to support without needing to define
        how to encode multiple media sources into SDP.
      </t>
      <t>
        It does so by following the model already in the WebRTC JS API
        for createDataChannel, where methods are supported on
        PeerConnection which don't need to be reflected in the SDP.
      </t>
      <t>
        This document does not question the use of SDP and the
        Offer/Answer model or the value they have in terms of
        interoperability with legacy or other non-WebRTC devices.  SDP
        is still used to setup the PeerConnection, and works perfectly
        well for up to one audio source and one video source.  This
        document shows how multiple media sources can be added to a
        PeerConnection after the initial setup is done via SDP.
        Furthermore, applications are free to implement more complex
        forms of SDP (such as Plan A or Plan B) on top of the JS
        methods proposed.
      </t>
    </abstract>
  </front>
  <middle>
    <section title='Background' anchor="background">
      <t>
        In its early stages the RTCWEB working group chose to use the
        Session Description Protocol (SDP) and the Offer/Answer model
        <xref target="RFC3264"/> when establishing and
        negotiating sessions. This choice was also accompanied by the
        decision not to mandate a specific signalling protocol so that,
        once interoperability has been achieved, web applications can
        choose the semantics that best fit their requirements. In some
        scenarios however, such as those involving the use of multiple
        media sources, these choices have left open the issue of exactly
        which operations should be handled by SDP Offer/Answer and which
        of them should be left to application-specific signalling.
      </t>
      <t>
        At the time of writing of this document, the RTCWEB working
        group is considering two approaches to addressing the issue,
        that are often referred to as Plan A <xref target="PlanA"/> and
        Plan B <xref target="PlanB"/>. Both of them describe semantics
        that require Offer/Answer exchanges in a number of situations
        where this could be avoided, particularly when adding or
        removing media sources to a session. This requirement applies
        equally to cases where a client adds the stream of a newly
        activated web cam, a simulcast flow or upon the arrival or
        departure of a conference participant.
      </t>
      <t>
        By taking the Offer/Answer approach, both Plan A and Plan B
        take away from the application the opportunity to handle such
        events in a way that is most fitting for the use case, which,
        among other things, also goes against the working group's
        decision to not to define a specific signalling protocol. (It
        could be argued that it is therefore only natural how proponents
        of each plan, having different use cases in mind, are remarkably
        far from reaching consensus).
      </t>
    </section>
    <section title='Introduction' anchor="intro">
      <t>
        The goal of this document is to propose additions to the
        WebRTC JS API that would alleviate the need for multiple SDP
        exchanges and encoding of multiple media sources.
      </t>
      <t>
        To achieve this, browsers and WebRTC endpoints in general will
        only use SDP Offer/Answer to establish transport channels and
        initialize an RTP stack and codec/processing chains. This also
        includes any renegotiation that requires the re-initialisation
        of these chains. For example, adding VP8 to a session that was
        setup with only H.264, would obviously still require an
        Offer/Answer exchange.
      </t>
      <t>
        All other session control and signalling are to be left to
        applications, which can use the added JS methods added to the
        WebRTC API.
      </t>
    </section>
    <section title="Additions to the WebRTC API" anchor="js-api">
      This document proposes that the following methods and dictionaries by added to the WebRTC API:
      <figure>
        <artwork align="left" xml:space="preserve">
        </artwork>
      </figure>            
    </section>
    <section title="WebRTC API example" anchor="js-api-example">
      Here is an example of how the API additions would be used:
            
      <figure>
        <artwork align="left" xml:space="preserve">
<![CDATA[
Intro: This follows the model of createDataChannel, which has a JS method on PeerConnection that makes it possible to add data channels without going through SDP.  Furthermore, just like createDataChannel allows 2 ways to handle neogitation (the "I know what I'm doing;  Here's what I want to send; Let me signal everything" mode and the "please take care of it for me;  send an OPEN message" mode), this also has 2 ways to handle negotiation (the "I know what I'm doing; Here's what I want to send; Let me signal everything" mode and the "please take care of it for me;  send SDP back and forth" mode). 
 
Following the success of createDataChannel, this allows simple applications to Just Work and more advanced applications to easily control what they need to.  In particular, it's possible to use this API to implement either Plan A or Plan B.

// The following two method are added to RTCPeerConnection
partial interface RTCPeerConnection {
 // Create a stream that is used to send a source stream.
 // The MediaSendStream.description can be used for signalling.
 // No media is sent until addStream(MediaSendStream) is called.
 LocalMediaStream createLocalStream(MediaStream sourceStream);

 // Create a stream that is used to receive media from the remote side,
 // given the parameters signalled from MedaiSendStream.description.
 MediaStream createRemoteStream(MediaStreamDescription description);
}


interface LocalMediaStream implements MediaStream {
  // This can be changed at any time, but especially before calling
  // PeerConnection.addStream
  attribute MediaStreamDescription description;
}


// Represents the parameters used to either send or receive a stream 
// over a PeerConnection.
dictionary MediaStreamDescription {
  MediaStreamTrackDescription[] tracks;
}


// Represents the parameters used to either send or receive a track over // a PeerConnection.  A track has many "flows", which can be grouped 
// together.
dictionary MediaStreamTrackDescription {
  // Same as the MediaStreamTrack.id
  DOMString id;

  // Same as the MediaStreamTrack.kind
  DOMString kind;  

  // A track can have many "flows", such as for Simulcast, FEC, etc.
  // And they can be grouped in arbitrary ways.
  MediaFlowDescription[] flows;
  MediaFlowGroup[] flowGroups;
}

// Represents the parameters used to either send or receive a "flow" 
// over a PeerConnection.  A "flow" is a media that arrives with a 
// single, unique SSRC.  One to many flows together make up the media 
// for a track.  For example, there may be Simulcast, FEC, and RTX 
// flows.
dictionay MediaFlowDescription {
  // The "flow id" must be unique to the track, but need not be unique 
  // outside of the track (two tracks could both have a flow with the 
  // same flow ID).
  DOMString id;

  // Each flow can go over its own transport.  If the JS sets this to a
  // transportId that doesn't have a transport setup already, the 
  // browser will use SDP negotiation to setup a transport to back that 
  // transportId.  If This is set to an MID in the SDP, then that MID's 
  // transport is used.
  DOMString transportId;

  // The SSRC used to send the flow.
  unsigned int ssrc;

  // When used as receive parameters, this indicates the possible list 
  // of codecs that might come in for this flow.  For exmample, a given 
  // receive flow could be setup to receive any of OPUS, ISAC, or PCMU.
  // When used as send parameters, this indicates that the first codec 
  // should be used, but the browser can use send other codecs if it 
  // needs to because of either bandwidth or CPU constraints.
  MediaCodecDescription[] codecs;
}


dictionary MediaFlowGroup {
  DOMString type;  // "SIM" for Simulcast, "FEC" for FEC, etc
  DOMString[] flowids;
}

dictionary MediaCodecDescription {
  unsigned byte payloadType;
  DOMString name;
  unsigned int? clockRate;
  unsigned int? bitRate;
  // A grab bag of other fmtp that will need to be further defined.
  MediaCodecParam[] params;  
}

dictionary MediaCodecParam {
  DOMString key;
  DOMString value;
}


Notes:

- When LocalMediaStreams are added using addStream, onnegotiatedneeded is not called, and those streams are never reflected in future SDP exchanges.  Indeed, it would be impossible to put them in the SDP without first resolving if that would be Plan A SDP or Plan B SDP.

- Just like piles of attributes would need to be defined for Plan A and for Plan B, similar attributes would need to be defined here (Luckily,  much work has already been done figuring out what those parameters are :).


Pros:

- Either Plan A or Plan B or could be implemented in Javascript using this API
- It exposes all the same functionality to the Javascript as SDP, but in a much nicer format that is much easier to work with.
- Any other signalling mechanism, such as Jingle or CLUE could be implemented using this API.
- There is almost no risk of signalling glare.
- Debugging errors with misconfigured descriptions should be much easier with this than with large SDP blobs.


Cons:

- Now there are two slightly different ways to add streams: by creating a LocalMediaStream first, and not.  This is, however, analogous to setting "negotiated: true" in createDataChannel.  On way is "Just Work", and the other is more advanced control.

- All the options in MediaCodecDescription are a bit complicated.  Really, this is only necessary because Plan A requires being able to specify codec parameters per SSRC, and set each flow on different transports.  If we did not have this requirement, we could simplify.


Example Usage:

// Imagine I have MyApp, handles creating a PeerConnection,
// signalling, and rendering streams.  This is how the new API could be 
// used.
var peerConnection = MyApp.createPeerConnection();

// On sender side:
var stream = MyApp.getMediaStream();
var localStream = peerConnection.createSendStream(stream);
sendStream.description = MyApp.modifyStream(localStream.description)
MyApp.signalAddStream(localStream.description, function(response)) {
  if (!response.rejected) {
    // Media will not be sent.
    peerConnection.addStream(localStream);
  }
}

// On receiver side:
MyApp.onAddStreamSignalled = function(streamDescription) {
  var stream = peerConnection.createReceiveStream(streamDescription);
  MyApp.renderStream(stream);
}

// In this exchange, the MediaStreamDescription signalled from the 
// sender to the receiver may have looked something like this:

{
  tracks: [
  {
    id: "audio1",
    kind: "audio",
    flows: [
    {
      id: "main",
      transportId: "transport1",
      ssrc: 1111,
      codecs: [
      {
        payloadType: 111,
        name: "opus",
        // ... more codec details
      },
      { 
        payloadType: 112,
        name: "pcmu",
        // ... more codec details
      }]
   }]
 },
 {
    id: "video1",
    kind: "video",
    flows: [
    {
      id: "sim0",
      transportId: "transport2",
      ssrc: 2222,
      codecs: [
      {
        payloadType: 122,
        name: "vp8"
        // ... more codec details
      }]
   },
   {
     id: "sim1",
     transportId: "transport2",
     ssrc: 2223,
     codecs: [
     {
       payloadType: 122,
       name: "vp8",
       // ... more codec details
     }]
   },
   {
     id: "sim2",
     transportId: "transport2",
     ssrc: 2224,
     codecs: [
     {
       payloadType: 122,
       name: "vp8",
       // ... more codec details
     }]
   },

   {
     id: "sim0fec",
     transportId: "transport2",
     ssrc: 2225,
     codecs: [
     {
       payloadType: 122,
       name: "vp8",
       // ...
     }]
   }],
   flowGroups: [
   {
     semantics: "SIM",
     ssrcs: [2222, 2223, 2224]
   },
   {
     semantics: "FEC",
     ssrcs: [2222, 2225]
   }]
 }]
}
]]>

        </artwork>
      </figure>            
    <section title="IANA Considerations" anchor="iana">
      <t>
        None.
      </t>
    </section>
  </middle>
  <back>
    <references title='Informative References'>
      <?rfc include="reference.RFC.3264"?>
      <?rfc include="reference.RFC.3551"?>
      <?rfc include="reference.RFC.4575"?>
      <?rfc include="reference.RFC.5285"?>
      <?rfc include="reference.RFC.5761"?>
      <?rfc include="reference.RFC.5956"?>
      <?rfc include="reference.RFC.6015"?>
      <?rfc include="reference.RFC.6051"?>
    <!--
      <?rfc include="reference.I-D.roach-rtcweb-plan-a"?>
    -->

      <!-- Plan A -->
      <reference anchor="PlanA"
                 target="reference.I-D.roach-rtcweb-plan-a">
        <front>
          <title>Using SDP with Large Numbers of Media Flows</title>
          <author initials="A. B." surname="Roach"
                  fullname="Adam Roach">
            <organization abbrev='Mozilla'>Mozilla</organization>
          </author>
          <author initials="M." surname="Thomson"
                  fullname="Martin Thomson">
            <organization abbrev='Microsoft'>Microsoft</organization>
          </author>
          <date month="May" day="07" year="2013" />
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.roach-rtcweb-plan-a' />
      </reference>

      <!-- Plan B -->
      <reference anchor="PlanB"
                 target="reference.I-D.uberti-rtcweb-plan">
        <front>
          <title>Plan B: a proposal for signaling multiple media sources
                 in WebRTC.</title>
          <author initials="J." surname="Uberti"
                  fullname="Justin Uberti">
            <organization abbrev='Google'>Google</organization>
          </author>
          <date month="May" day="03" year="2013" />
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.uberti-rtcweb-plan' />
      </reference>

      <!-- MSID -->
      <reference anchor="MSID"
                 target="reference.I-D.ietf-mmusic-msid">
        <front>
          <title>Cross Session Stream Identification in the Session
                 Description Protocol</title>
          <author initials="H." surname="Alvestrand"
                  fullname="Harald Alvestrand">
            <organization abbrev='Google'>Google</organization>
          </author>
          <date month="February" day="10" year="2013" />
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.ietf-mmusic-msid' />
      </reference>

      <!-- ROACH-GLARELESS-ADD -->
      <reference anchor="ROACH-GLARELESS-ADD"
                 target="reference.I-D.roach-rtcweb-glareless-add">
        <front>
          <title>An Approach for Adding RTCWEB Media Streams without
                 Glare</title>
          <author initials="A. B." surname="Roach"
                  fullname="Adam Roach">
            <organization abbrev='Mozilla'>Mozilla</organization>
          </author>
          <date month="May" day="07" year="2013" />
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.roach-rtcweb-glareless-add' />
      </reference>

      <!-- MAX-SSRC -->
      <reference anchor="MAX-SSRC"
                 target="reference.I-D.westerlund-avtcore-max-ssrc">
        <front>
          <title>Multiple Synchronization sources (SSRC) in RTP Session
            Signaling
          </title>
          <author fullname="Magnus Westerlund" initials="M."
                  surname="Westerlund">
            <organization>Ericsson</organization>
          </author>
          <author fullname="Bo Burman" initials="B." surname="Burman">
            <organization>Ericsson</organization>
          </author>
          <author fullname="Fredrik Jansson" initials="F."
                  surname="Jansson">
            <organization>Ericsson</organization>
          </author>
          <date day="16" month="July" year="2012"/>
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.westerlund-avtcore-max-ssrc' />
      </reference>

      <!-- CLUE -->
      <reference anchor="CLUE"
                 target="reference.I-D.ietf-clue-framework">
        <front>
          <title>Framework for Telepresence Multi-Streams</title>
          <author fullname="Mark Duckworth" initials="M."
                  surname="Duckworth">
            <organization>Polycom</organization>
          </author>
          <author fullname="Andrew Pepperell" initials="A."
                  surname="Pepperell">
            <organization>Acano</organization>
          </author>
          <author fullname="Stephan Wenger" initials="S."
                  surname="Wenger">
            <organization>Vidyo</organization>
          </author>
          <date day="16" month="May" year="2013"/>
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.ietf-clue-framework' />
      </reference>

      <!-- COIN -->
      <reference anchor="COIN"
                 target="reference.I-D.ietf-coin-framework">
        <front>
          <title>XEP-0298: Delivering Conference Information to Jingle
                 Participants (Coin)</title>
          <author fullname="Emil Ivov" initials="E."
                  surname="Ivov">
            <organization>Jitsi</organization>
          </author>
          <author fullname="Enrico Marocco" initials="E."
                  surname="Marocco">
            <organization>Telecom Italia Labs</organization>
          </author>
          <date day="09" month="June" year="2011"/>
        </front>
        <seriesInfo name="XSF XEP" value="0298"/>
        <format type="HTML"
                target="http://xmpp.org/extensions/xep-0298.html"/>
      </reference>

      <!-- Trickle ICE -->
      <reference anchor="TRICKLE-ICE"
                 target="reference.I-D.ivov-mmusic-trickle-ice">
        <front>
          <title abbrev='Trickle ICE'>
            Trickle ICE: Incremental Provisioning of Candidates for the
            Interactive Connectivity Establishment (ICE) Protocol
          </title>
          <author initials='E.' surname='Ivov'
                  fullname='Emil Ivov'>
            <organization abbrev='Jitsi'>Jitsi</organization>
          </author>
          <author fullname="Eric Rescorla" initials="E.K."
                  surname="Rescorla">
            <organization>RTFM, Inc.</organization>
          </author>
          <author fullname="Justin Uberti" initials="J."
                  surname="Uberti">
            <organization>Google</organization>
          </author>
          <date day="11" month="March" year="2013"/>
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.ivov-mmusic-trickle-ice' />
      </reference>

      <!-- SRCNAME -->
      <reference anchor="SRCNAME"
             target="reference.I-D.westerlund-avtext-rtcp-sdes-srcname">
        <front>
          <title>RTCP SDES Item SRCNAME to Label Individual Sources
          </title>
          <author fullname="Magnus Westerlund" initials="M."
                  surname="Westerlund">
            <organization>Ericsson</organization>
          </author>
          <author fullname="Bo Burman" initials="B." surname="Burman">
            <organization>Ericsson</organization>
          </author>
          <author fullname="Patrik Sandgren" initials="P."
                  surname="Sandgren">
            <organization>Ericsson</organization>
          </author>
          <date day="22" month="October" year="2012"/>
        </front>
        <seriesInfo name='Internet-Draft'
            value='reference.I-D.westerlund-avtext-rtcp-sdes-srcname' />
      </reference>
    </references>
    <section title='Acknowledgements'>
      <t>
        Many thanks to Enrico Marocco, Bernard Aboba and Peter Thatcher
        for reviewing this document and providing numerous comments and
        substantial input.
      </t>
    </section>
  </back>

</rfc>