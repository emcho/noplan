<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc category="std" ipr="trust200902"
     docName="draft-pthatcher-rtcweb-noplan-trimmed-00">

<?rfc toc='yes' ?>
<?rfc symrefs='yes' ?>
<?rfc sortrefs='yes'?>
<?rfc iprnotified='no' ?>
<?rfc strict='yes' ?>
<?rfc compact='yes' ?>
  <front>
    <title abbrev="No Plan: Many media sources without many SDP exchanges">No Plan:
      Use WebRTC JS API extensions to add and remove media sources without using extra SDP exchanges.
    </title>

    <author initials='E.' surname='Ivov' fullname='Emil Ivov'>
      <organization abbrev='Jitsi'>Jitsi</organization>
      <address>
        <postal>
          <street></street>
          <city>Strasbourg</city>
          <code>67000</code>
          <country>France</country>
        </postal>
        <phone>+33-177-624-330</phone>
        <email>emcho@jitsi.org</email>
      </address>
    </author>
    <author initials='E.' surname='Marocco' fullname='Enrico Marocco'>
      <organization>Telecom Italia</organization>
      <address>
        <postal>
          <street>Via G. Reiss Romoli, 274</street>
          <city>Turin</city>
          <code>10148</code>
          <country>Italy</country>
        </postal>
        <email>enrico.marocco@telecomitalia.it</email>
      </address>
    </author>
    <author fullname="Peter Thatcher" initials="P." surname="Thatcher">
      <organization>Google</organization>
      <address>
        <postal>
          <street>747 6th St S</street>
          <city>Kirkland</city>
          <region>WA</region>
          <code>98033</code>
          <country>USA</country>
        </postal>
        <phone>+1 857 288 8888</phone>
        <email>pthatcher@google.com</email>
      </address>
    </author>
    <date/>

    <abstract>
      <t>
        This document describes changes to the WebRTC JS API that
        would make is possible for WebRTC applications to send and
        receive multiple media sources within a multimedia session
        without needing to define the per-source RTP parameteters
        (such as SSRCS) within SDP.  This would give WebRTC
        applications a clean, flexible API that could implement "Plan
        A" SDP, "Plan B" SDP, or any other signalling mechanism that
        WebRTC application wishes to support without needing to define
        how to encode multiple media sources into SDP.
      </t>
      <t>
        It does so by following the model already in the WebRTC JS API
        for createDataChannel, where methods are supported on
        PeerConnection which don't need to be reflected in the SDP.
      </t>
      <t>
        This document does not question the use of SDP and the
        Offer/Answer model or the value they have in terms of
        interoperability with legacy or other non-WebRTC devices.  SDP
        is still used to setup the PeerConnection, and works perfectly
        well for up to one audio source and one video source.  This
        document shows how multiple media sources can be added to a
        PeerConnection after the initial setup is done via SDP.
        Furthermore, applications are free to implement more complex
        forms of SDP (such as Plan A or Plan B) on top of the JS
        methods proposed.
      </t>
    </abstract>
  </front>
  <middle>
    <section title='Background' anchor="background">
      <t>
        In its early stages the RTCWEB working group chose to use the
        Session Description Protocol (SDP) and the Offer/Answer model
        <xref target="RFC3264"/> when establishing and
        negotiating sessions. This choice was also accompanied by the
        decision not to mandate a specific signalling protocol so that,
        once interoperability has been achieved, web applications can
        choose the semantics that best fit their requirements. In some
        scenarios however, such as those involving the use of multiple
        media sources, these choices have left open the issue of exactly
        which operations should be handled by SDP Offer/Answer and which
        of them should be left to application-specific signalling.
      </t>
      <t>
        At the time of writing of this document, the RTCWEB working
        group is considering two approaches to addressing the issue,
        that are often referred to as Plan A <xref target="PlanA"/> and
        Plan B <xref target="PlanB"/>. Both of them describe semantics
        that require Offer/Answer exchanges in a number of situations
        where this could be avoided, particularly when adding or
        removing media sources to a session. This requirement applies
        equally to cases where a client adds the stream of a newly
        activated web cam, a simulcast flow or upon the arrival or
        departure of a conference participant.
      </t>
      <t>
        By taking the Offer/Answer approach, both Plan A and Plan B
        take away from the application the opportunity to handle such
        events in a way that is most fitting for the use case, which,
        among other things, also goes against the working group's
        decision to not to define a specific signalling protocol. (It
        could be argued that it is therefore only natural how proponents
        of each plan, having different use cases in mind, are remarkably
        far from reaching consensus).
      </t>
    </section>
    <section title='Introduction' anchor="intro">
      <t>
        The goal of this document is to propose additions to the
        WebRTC JS API that would alleviate the need for multiple SDP
        exchanges and encoding of multiple media sources.
      </t>
      <t>
        To achieve this, browsers and WebRTC endpoints in general will
        only use SDP Offer/Answer to establish transport channels and
        initialize an RTP stack and codec/processing chains. This also
        includes any renegotiation that requires the re-initialisation
        of these chains. For example, adding VP8 to a session that was
        setup with only H.264, would obviously still require an
        Offer/Answer exchange.
      </t>
      <t>
        All other session control and signalling are to be left to
        applications, which can use the added JS methods added to the
        WebRTC API.
      </t>
    </section>
    <section title="Additions to the WebRTC API" anchor="js-api">
      This document proposes that the following methods and dictionaries by added to the WebRTC API:
      <figure>
        <artwork align="left" xml:space="preserve">
<![CDATA[
partial interface RTCPeerConnection {
  // Add a track to the PeerConnection to send media from this track
  // over this peer connection.  Media will not be sent until
  // MediaStramTrackSender.start(), allowing the send parameters to be
  // changed before starting.  Also, the application probably wants to
  // signal the MediaStramTrackSender.params to the remote side and
  // receive and acknowledgement that the remote side wants to receive
  // the track before starting.
  MediaStreamTrackSender createTrackSender(MediaStreamTrack track);

  // Given TrackSendParams (which was probably signalled from the remote 
  // side), create a track to receive the media sent by the remote side.
  MediaStreamTrack createTrackReceiver(TrackSendParams sendParams);
}

interface MediaStreamTrackSender {
  // Params to use when sending the media.  
  // Can be changed before start() is called.
  attribute TrackSendParams params;

  // Start encoding and sending media until stop() is called.
  void start();

  // Once called, no more media is sent by this sender.  
  // A track sender can never be "un-stopped".
  void stop();

  // Possible future additions:
  // void setVideoResolution(unsigned long? height,
  //                         unsigned long? width, 
  //                         unsigned short? framerate);
}

dictionary TrackSendParams {
 // The track will be sent with the following SSRCs, which can be grouped by  
 // various semenatics.
 unsigned long[] ssrcs;
 SsrcGroup[] ssrcGroups;

 // Possible future expansion:
 //   Optional ID that can be put into a header extension so that
 //   potentially SSRCs don't need to be acked before sending.  How
 //   this gets put into the RTP packets is still undefined.
 // unsigned long? headerExtensionTrackId;  
 //   Optional ID indicating which transport the track should be sent
 //   on.  If unspecified, the browser will pick a good default.
 //   There is only one transport when using BUNDLE, and usually only
 //   one for each media type even when not using BUNDLE, meaning this
 //   is only necessary in few scenarios.  When it is used, it should
 //   match the SDP's MID.
 // DOMString? transportId;
 //   List of codecs (by name, not payload type) to use for this track.
 // DOMString[] codecs;
 //   List of header extensions to use for this track.
 // DOMString[] headerExtensions;
}

dictionary SsrcGroup {
  // Indicates the meaning of the ssrc grouping.  
  // For example "SIM" would be used for simulcast, and "FEC" for FEC.
  // A given SSRC can be in more than one SSRC grouping.
  DOMString semantics;  // "SIM", "FEC", etc
  unsigned long[] ssrcs;
}
]]>
        </artwork>
      </figure>            
    </section>
    <section title="WebRTC API example" anchor="js-api-example">
      Here is an example of how the API additions would be used:
            
      <figure>
        <artwork align="left" xml:space="preserve">
<![CDATA[
var signalling = setupSignallingInAppSpecificWay();
var peerConnection = setupPeerConnectionInAppSpecificWay(signalling);

// On sender side:
var track = getATrackSomehow();
var send = peerConnection.createTrackSender(track);
// Possibly change send.params in an app-specific way.
signalling.addTrack(send.params, function(acked) {
  if (acked) {
    send.start();
    // And later:
    send.stop();
  }
});

// On receiver side:
signalling.ontrackadded = function(rtpParams) {
  var track = peerConnection.createTrackReceiver(rtpParams);
  // Hookup track to <audio> or <video>.
  // And later:
  track.stop()
}

// In this exchange, the TrackSendParams signalled from the sender to the 
// receiver may have looked something like this:
{
  ssrcs: [12345, 23456, 34567],
  ssrcGroups: [{
    semantics: "SIM",
    ssrcs: [12345, 23456, 34567]
  }]
}
// or this:
{
  ssrcs: [45678],
  ssrcGroups: []
}
]]>
        </artwork>
      </figure>            
    <section title="Questions" anchor="question">
      <t>
        Will the tracks added via the new methods in PeerConnection be
        reflected in the SDP in future O/A?
      </t>
      <t>
        No.  This works just like createDataChannel().  Only the
        intial transport setup is reflected in the SDP.  Everything
        after that is independent of the SDP.  Further, if the answer
        to this question were "yes", we'd have to decide how to encode
        multiple sources into SDP, and we'd be right back to Plan A
        vs. Plan B.  
      </t>
      <t>
        How will the new API methods be used to speak to legacy
        devices with more than one audio source and more than one
        video source?
      </t>
      <t>
        The JS application would be free to implement whatever form of
        signalling is necessary to speak to that legacy device,
        whether it be Plan A SDP, Plan B SDP, CLUE, or something else.
        The browser would not choose for it which legacy devices it
        can speak to.
      </t>
    </section>
    <section title="IANA Considerations" anchor="iana">
      <t>
        None.
      </t>
    </section>
  </middle>
  <back>
    <references title='Informative References'>
      <?rfc include="reference.RFC.3264"?>
      <?rfc include="reference.RFC.3551"?>
      <?rfc include="reference.RFC.4575"?>
      <?rfc include="reference.RFC.5285"?>
      <?rfc include="reference.RFC.5761"?>
      <?rfc include="reference.RFC.5956"?>
      <?rfc include="reference.RFC.6015"?>
      <?rfc include="reference.RFC.6051"?>
    <!--
      <?rfc include="reference.I-D.roach-rtcweb-plan-a"?>
    -->

      <!-- Plan A -->
      <reference anchor="PlanA"
                 target="reference.I-D.roach-rtcweb-plan-a">
        <front>
          <title>Using SDP with Large Numbers of Media Flows</title>
          <author initials="A. B." surname="Roach"
                  fullname="Adam Roach">
            <organization abbrev='Mozilla'>Mozilla</organization>
          </author>
          <author initials="M." surname="Thomson"
                  fullname="Martin Thomson">
            <organization abbrev='Microsoft'>Microsoft</organization>
          </author>
          <date month="May" day="07" year="2013" />
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.roach-rtcweb-plan-a' />
      </reference>

      <!-- Plan B -->
      <reference anchor="PlanB"
                 target="reference.I-D.uberti-rtcweb-plan">
        <front>
          <title>Plan B: a proposal for signaling multiple media sources
                 in WebRTC.</title>
          <author initials="J." surname="Uberti"
                  fullname="Justin Uberti">
            <organization abbrev='Google'>Google</organization>
          </author>
          <date month="May" day="03" year="2013" />
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.uberti-rtcweb-plan' />
      </reference>

      <!-- MSID -->
      <reference anchor="MSID"
                 target="reference.I-D.ietf-mmusic-msid">
        <front>
          <title>Cross Session Stream Identification in the Session
                 Description Protocol</title>
          <author initials="H." surname="Alvestrand"
                  fullname="Harald Alvestrand">
            <organization abbrev='Google'>Google</organization>
          </author>
          <date month="February" day="10" year="2013" />
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.ietf-mmusic-msid' />
      </reference>

      <!-- ROACH-GLARELESS-ADD -->
      <reference anchor="ROACH-GLARELESS-ADD"
                 target="reference.I-D.roach-rtcweb-glareless-add">
        <front>
          <title>An Approach for Adding RTCWEB Media Streams without
                 Glare</title>
          <author initials="A. B." surname="Roach"
                  fullname="Adam Roach">
            <organization abbrev='Mozilla'>Mozilla</organization>
          </author>
          <date month="May" day="07" year="2013" />
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.roach-rtcweb-glareless-add' />
      </reference>

      <!-- MAX-SSRC -->
      <reference anchor="MAX-SSRC"
                 target="reference.I-D.westerlund-avtcore-max-ssrc">
        <front>
          <title>Multiple Synchronization sources (SSRC) in RTP Session
            Signaling
          </title>
          <author fullname="Magnus Westerlund" initials="M."
                  surname="Westerlund">
            <organization>Ericsson</organization>
          </author>
          <author fullname="Bo Burman" initials="B." surname="Burman">
            <organization>Ericsson</organization>
          </author>
          <author fullname="Fredrik Jansson" initials="F."
                  surname="Jansson">
            <organization>Ericsson</organization>
          </author>
          <date day="16" month="July" year="2012"/>
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.westerlund-avtcore-max-ssrc' />
      </reference>

      <!-- CLUE -->
      <reference anchor="CLUE"
                 target="reference.I-D.ietf-clue-framework">
        <front>
          <title>Framework for Telepresence Multi-Streams</title>
          <author fullname="Mark Duckworth" initials="M."
                  surname="Duckworth">
            <organization>Polycom</organization>
          </author>
          <author fullname="Andrew Pepperell" initials="A."
                  surname="Pepperell">
            <organization>Acano</organization>
          </author>
          <author fullname="Stephan Wenger" initials="S."
                  surname="Wenger">
            <organization>Vidyo</organization>
          </author>
          <date day="16" month="May" year="2013"/>
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.ietf-clue-framework' />
      </reference>

      <!-- COIN -->
      <reference anchor="COIN"
                 target="reference.I-D.ietf-coin-framework">
        <front>
          <title>XEP-0298: Delivering Conference Information to Jingle
                 Participants (Coin)</title>
          <author fullname="Emil Ivov" initials="E."
                  surname="Ivov">
            <organization>Jitsi</organization>
          </author>
          <author fullname="Enrico Marocco" initials="E."
                  surname="Marocco">
            <organization>Telecom Italia Labs</organization>
          </author>
          <date day="09" month="June" year="2011"/>
        </front>
        <seriesInfo name="XSF XEP" value="0298"/>
        <format type="HTML"
                target="http://xmpp.org/extensions/xep-0298.html"/>
      </reference>

      <!-- Trickle ICE -->
      <reference anchor="TRICKLE-ICE"
                 target="reference.I-D.ivov-mmusic-trickle-ice">
        <front>
          <title abbrev='Trickle ICE'>
            Trickle ICE: Incremental Provisioning of Candidates for the
            Interactive Connectivity Establishment (ICE) Protocol
          </title>
          <author initials='E.' surname='Ivov'
                  fullname='Emil Ivov'>
            <organization abbrev='Jitsi'>Jitsi</organization>
          </author>
          <author fullname="Eric Rescorla" initials="E.K."
                  surname="Rescorla">
            <organization>RTFM, Inc.</organization>
          </author>
          <author fullname="Justin Uberti" initials="J."
                  surname="Uberti">
            <organization>Google</organization>
          </author>
          <date day="11" month="March" year="2013"/>
        </front>
        <seriesInfo name='Internet-Draft'
                    value='reference.I-D.ivov-mmusic-trickle-ice' />
      </reference>

      <!-- SRCNAME -->
      <reference anchor="SRCNAME"
             target="reference.I-D.westerlund-avtext-rtcp-sdes-srcname">
        <front>
          <title>RTCP SDES Item SRCNAME to Label Individual Sources
          </title>
          <author fullname="Magnus Westerlund" initials="M."
                  surname="Westerlund">
            <organization>Ericsson</organization>
          </author>
          <author fullname="Bo Burman" initials="B." surname="Burman">
            <organization>Ericsson</organization>
          </author>
          <author fullname="Patrik Sandgren" initials="P."
                  surname="Sandgren">
            <organization>Ericsson</organization>
          </author>
          <date day="22" month="October" year="2012"/>
        </front>
        <seriesInfo name='Internet-Draft'
            value='reference.I-D.westerlund-avtext-rtcp-sdes-srcname' />
      </reference>
    </references>
    <section title='Acknowledgements'>
      <t>
        Many thanks to Enrico Marocco, Bernard Aboba and Peter Thatcher
        for reviewing this document and providing numerous comments and
        substantial input.
      </t>
    </section>
  </back>

</rfc>